#!/bin/bash

# Pre-commit hook for Yomali Traffic Tracker
# Runs code quality checks before commit

set -e

echo "üîç Running pre-commit checks..."

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Check if containers are running
if ! docker ps | grep -q yomali_php; then
    echo -e "${RED}‚ùå Docker containers are not running. Please run 'make up' first.${NC}"
    exit 1
fi

# Get list of PHP files to check (only staged files)
PHP_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep '\.php$' || true)

if [ -n "$PHP_FILES" ]; then
    echo "üìù Checking PHP files..."

    # Check PHP syntax
    echo "  ‚Üí Checking PHP syntax..."
    for FILE in $PHP_FILES; do
        docker exec yomali_php php -l "/var/www/$FILE" > /dev/null
        if [ $? -ne 0 ]; then
            echo -e "${RED}‚ùå PHP syntax error in $FILE${NC}"
            exit 1
        fi
    done
    echo -e "${GREEN}  ‚úì PHP syntax OK${NC}"

    # Check if vendor directory exists
    if docker exec yomali_php test -d /var/www/vendor; then

        # Run PHP CodeSniffer (only on src/ files)
        SRC_FILES=$(echo "$PHP_FILES" | grep '^src/' || true)
        if [ -n "$SRC_FILES" ]; then
            echo "  ‚Üí Running PHP CodeSniffer..."
            docker exec yomali_php vendor/bin/phpcs --standard=PSR12 $SRC_FILES 2>/dev/null
            if [ $? -ne 0 ]; then
                echo -e "${YELLOW}‚ö†Ô∏è  Code style issues found. Run 'make cs-fix' to fix automatically.${NC}"
                echo "Do you want to continue anyway? (y/n)"
                read -r response
                if [ "$response" != "y" ]; then
                    exit 1
                fi
            else
                echo -e "${GREEN}  ‚úì Code style OK${NC}"
            fi

            # Run PHPStan (only on src/ files)
            echo "  ‚Üí Running PHPStan..."
            docker exec yomali_php vendor/bin/phpstan analyse $SRC_FILES --level=5 --no-progress 2>/dev/null
            if [ $? -ne 0 ]; then
                echo -e "${YELLOW}‚ö†Ô∏è  PHPStan found potential issues.${NC}"
                echo "Do you want to continue anyway? (y/n)"
                read -r response
                if [ "$response" != "y" ]; then
                    exit 1
                fi
            else
                echo -e "${GREEN}  ‚úì Static analysis OK${NC}"
            fi
        fi
    else
        echo -e "${YELLOW}‚ö†Ô∏è  Vendor directory not found. Skipping code quality checks.${NC}"
    fi
fi

# Check for debugging statements (SOLO en src/, public/, tests/)
echo "  ‚Üí Checking for debug statements..."
DEBUG_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep -E '^(src/|public/|tests/)' || true)

if [ -n "$DEBUG_FILES" ]; then
    DEBUG_FOUND=false
    for FILE in $DEBUG_FILES; do
        if git diff --cached "$FILE" | grep -E '^\+.*(var_dump|[^a-zA-Z]die\(|[^a-zA-Z]dd\(|[^a-zA-Z]dump\(|print_r|console\.log|debugger)' > /dev/null; then
            echo -e "${YELLOW}    Found debug statement in: $FILE${NC}"
            DEBUG_FOUND=true
        fi
    done

    if [ "$DEBUG_FOUND" = true ]; then
        echo -e "${YELLOW}‚ö†Ô∏è  Debug statements detected. Please remove them before committing.${NC}"
        echo "Do you want to continue anyway? (y/n)"
        read -r response
        if [ "$response" != "y" ]; then
            exit 1
        fi
    fi
fi

# Check for merge conflicts
echo "  ‚Üí Checking for merge conflicts..."
CONFLICT_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep -E '^(src/|public/|tests/)' || true)

if [ -n "$CONFLICT_FILES" ]; then
    for FILE in $CONFLICT_FILES; do
        if git diff --cached "$FILE" | grep -E '^(\+|\-)?(<<<<<<<|=======|>>>>>>>)' > /dev/null; then
            echo -e "${RED}‚ùå Merge conflict markers detected in $FILE. Please resolve conflicts before committing.${NC}"
            exit 1
        fi
    done
fi

echo -e "${GREEN}‚úÖ All pre-commit checks passed!${NC}"